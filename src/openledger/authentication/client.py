# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawAuthenticationClient, RawAuthenticationClient
from .types.post_v1auth_developer_token_response import PostV1AuthDeveloperTokenResponse
from .types.post_v1auth_entity_token_response import PostV1AuthEntityTokenResponse
from .types.post_v1auth_tokens_request_user_type import PostV1AuthTokensRequestUserType
from .types.post_v1auth_tokens_response import PostV1AuthTokensResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class AuthenticationClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawAuthenticationClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawAuthenticationClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawAuthenticationClient
        """
        return self._raw_client

    def generate_access_token(
        self,
        *,
        user_type: PostV1AuthTokensRequestUserType,
        id: str,
        api_key: str,
        developer_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PostV1AuthTokensResponse:
        """
        Generates a JWT access token for any user type with a unified request format

        Parameters
        ----------
        user_type : PostV1AuthTokensRequestUserType
            The type of user requesting authentication

        id : str
            The ID of the user (developerId for developers, entityId for entities, userId for admins)

        api_key : str
            The API key for authentication

        developer_id : typing.Optional[str]
            Required for entity userType - the developer ID that owns the entity

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostV1AuthTokensResponse
            Token generated successfully

        Examples
        --------
        from openledger import OpenLedgerClient

        client = OpenLedgerClient(
            token="YOUR_TOKEN",
        )
        client.authentication.generate_access_token(
            user_type="developer",
            id="id",
            api_key="apiKey",
        )
        """
        _response = self._raw_client.generate_access_token(
            user_type=user_type, id=id, api_key=api_key, developer_id=developer_id, request_options=request_options
        )
        return _response.data

    def generate_developer_authentication_token(
        self, *, developer_id: str, api_key: str, request_options: typing.Optional[RequestOptions] = None
    ) -> PostV1AuthDeveloperTokenResponse:
        """
        Generates a JWT token for developer authentication

        Parameters
        ----------
        developer_id : str
            The ID of the developer

        api_key : str
            The API key for the developer

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostV1AuthDeveloperTokenResponse
            Token generated successfully

        Examples
        --------
        from openledger import OpenLedgerClient

        client = OpenLedgerClient(
            token="YOUR_TOKEN",
        )
        client.authentication.generate_developer_authentication_token(
            developer_id="developerId",
            api_key="apiKey",
        )
        """
        _response = self._raw_client.generate_developer_authentication_token(
            developer_id=developer_id, api_key=api_key, request_options=request_options
        )
        return _response.data

    def generate_entity_authentication_token(
        self,
        *,
        entity_id: str,
        api_key: str,
        developer_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PostV1AuthEntityTokenResponse:
        """
        Generates a JWT token for entity authentication

        Parameters
        ----------
        entity_id : str
            The ID of the entity

        api_key : str
            The API key for the entity

        developer_id : str
            The ID of the developer

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostV1AuthEntityTokenResponse
            Token generated successfully

        Examples
        --------
        from openledger import OpenLedgerClient

        client = OpenLedgerClient(
            token="YOUR_TOKEN",
        )
        client.authentication.generate_entity_authentication_token(
            entity_id="entityId",
            api_key="apiKey",
            developer_id="developerId",
        )
        """
        _response = self._raw_client.generate_entity_authentication_token(
            entity_id=entity_id, api_key=api_key, developer_id=developer_id, request_options=request_options
        )
        return _response.data


class AsyncAuthenticationClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawAuthenticationClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawAuthenticationClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawAuthenticationClient
        """
        return self._raw_client

    async def generate_access_token(
        self,
        *,
        user_type: PostV1AuthTokensRequestUserType,
        id: str,
        api_key: str,
        developer_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PostV1AuthTokensResponse:
        """
        Generates a JWT access token for any user type with a unified request format

        Parameters
        ----------
        user_type : PostV1AuthTokensRequestUserType
            The type of user requesting authentication

        id : str
            The ID of the user (developerId for developers, entityId for entities, userId for admins)

        api_key : str
            The API key for authentication

        developer_id : typing.Optional[str]
            Required for entity userType - the developer ID that owns the entity

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostV1AuthTokensResponse
            Token generated successfully

        Examples
        --------
        import asyncio

        from openledger import AsyncOpenLedgerClient

        client = AsyncOpenLedgerClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.authentication.generate_access_token(
                user_type="developer",
                id="id",
                api_key="apiKey",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.generate_access_token(
            user_type=user_type, id=id, api_key=api_key, developer_id=developer_id, request_options=request_options
        )
        return _response.data

    async def generate_developer_authentication_token(
        self, *, developer_id: str, api_key: str, request_options: typing.Optional[RequestOptions] = None
    ) -> PostV1AuthDeveloperTokenResponse:
        """
        Generates a JWT token for developer authentication

        Parameters
        ----------
        developer_id : str
            The ID of the developer

        api_key : str
            The API key for the developer

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostV1AuthDeveloperTokenResponse
            Token generated successfully

        Examples
        --------
        import asyncio

        from openledger import AsyncOpenLedgerClient

        client = AsyncOpenLedgerClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.authentication.generate_developer_authentication_token(
                developer_id="developerId",
                api_key="apiKey",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.generate_developer_authentication_token(
            developer_id=developer_id, api_key=api_key, request_options=request_options
        )
        return _response.data

    async def generate_entity_authentication_token(
        self,
        *,
        entity_id: str,
        api_key: str,
        developer_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PostV1AuthEntityTokenResponse:
        """
        Generates a JWT token for entity authentication

        Parameters
        ----------
        entity_id : str
            The ID of the entity

        api_key : str
            The API key for the entity

        developer_id : str
            The ID of the developer

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostV1AuthEntityTokenResponse
            Token generated successfully

        Examples
        --------
        import asyncio

        from openledger import AsyncOpenLedgerClient

        client = AsyncOpenLedgerClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.authentication.generate_entity_authentication_token(
                entity_id="entityId",
                api_key="apiKey",
                developer_id="developerId",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.generate_entity_authentication_token(
            entity_id=entity_id, api_key=api_key, developer_id=developer_id, request_options=request_options
        )
        return _response.data
