# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .transaction_status import TransactionStatus


class Transaction(UniversalBaseModel):
    id: str
    amount: float
    description: str
    date: str
    status: TransactionStatus
    type: str
    category_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="categoryId")] = None
    debit_account_id: typing_extensions.Annotated[str, FieldMetadata(alias="debitAccountId")]
    credit_account_id: typing_extensions.Annotated[str, FieldMetadata(alias="creditAccountId")]
    entity_id: typing_extensions.Annotated[str, FieldMetadata(alias="entityId")]
    metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
