# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .tool_response_response_type import ToolResponseResponseType
from .tool_response_type import ToolResponseType


class ToolResponse(UniversalBaseModel):
    type: ToolResponseType
    response_type: typing_extensions.Annotated[ToolResponseResponseType, FieldMetadata(alias="responseType")]
    thought_process: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="thoughtProcess")] = None
    is_follow_up: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="isFollowUp")] = None
    reference_to_history: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="referenceToHistory")
    ] = None
    reference_to_ui_state: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="referenceToUiState")
    ] = None
    tool_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="toolName")] = None
    tool_args: typing_extensions.Annotated[
        typing.Optional[typing.Optional[typing.Any]], FieldMetadata(alias="toolArgs")
    ] = None
    workflow_description: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="workflowDescription")
    ] = None
    workflow_steps: typing_extensions.Annotated[
        typing.Optional[typing.Optional[typing.Any]], FieldMetadata(alias="workflowSteps")
    ] = None
    reason: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
