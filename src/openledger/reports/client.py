# This file was auto-generated by Fern from our API Definition.

from ..core.client_wrapper import SyncClientWrapper
import typing
from .types.get_reports_financial_request_type import GetReportsFinancialRequestType
from ..core.request_options import RequestOptions
from ..types.financial_report import FinancialReport
from ..core.pydantic_utilities import parse_obj_as
from ..errors.bad_request_error import BadRequestError
from ..errors.not_found_error import NotFoundError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..types.general_ledger import GeneralLedger
from ..core.client_wrapper import AsyncClientWrapper


class ReportsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_financial_reports(
        self,
        *,
        entity_id: str,
        month: typing.Optional[str] = None,
        year: typing.Optional[str] = None,
        type: typing.Optional[GetReportsFinancialRequestType] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FinancialReport:
        """
        Get financial statements including balance sheet, income statement, and cash flow

        Parameters
        ----------
        entity_id : str
            entity ID

        month : typing.Optional[str]
            Month (1-12)

        year : typing.Optional[str]
            Year (YYYY)

        type : typing.Optional[GetReportsFinancialRequestType]
            Report type

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FinancialReport
            Financial reports

        Examples
        --------
        from openledger import OpenLedgerClient

        client = OpenLedgerClient(
            token="YOUR_TOKEN",
        )
        client.reports.get_financial_reports(
            entity_id="entityId",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "reports/financial",
            method="GET",
            params={
                "entityId": entity_id,
                "month": month,
                "year": year,
                "type": type,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    FinancialReport,
                    parse_obj_as(
                        type_=FinancialReport,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def generate_general_ledger(
        self,
        *,
        entity_id: str,
        month: typing.Optional[str] = None,
        year: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GeneralLedger:
        """
        Generate a general ledger report for an entity

        Parameters
        ----------
        entity_id : str
            entity ID

        month : typing.Optional[str]
            Month (1-12)

        year : typing.Optional[str]
            Year (YYYY)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GeneralLedger
            General ledger report

        Examples
        --------
        from openledger import OpenLedgerClient

        client = OpenLedgerClient(
            token="YOUR_TOKEN",
        )
        client.reports.generate_general_ledger(
            entity_id="entityId",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "reports/general-ledger",
            method="GET",
            params={
                "entityId": entity_id,
                "month": month,
                "year": year,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GeneralLedger,
                    parse_obj_as(
                        type_=GeneralLedger,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncReportsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_financial_reports(
        self,
        *,
        entity_id: str,
        month: typing.Optional[str] = None,
        year: typing.Optional[str] = None,
        type: typing.Optional[GetReportsFinancialRequestType] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FinancialReport:
        """
        Get financial statements including balance sheet, income statement, and cash flow

        Parameters
        ----------
        entity_id : str
            entity ID

        month : typing.Optional[str]
            Month (1-12)

        year : typing.Optional[str]
            Year (YYYY)

        type : typing.Optional[GetReportsFinancialRequestType]
            Report type

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FinancialReport
            Financial reports

        Examples
        --------
        import asyncio

        from openledger import AsyncOpenLedgerClient

        client = AsyncOpenLedgerClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.reports.get_financial_reports(
                entity_id="entityId",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "reports/financial",
            method="GET",
            params={
                "entityId": entity_id,
                "month": month,
                "year": year,
                "type": type,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    FinancialReport,
                    parse_obj_as(
                        type_=FinancialReport,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def generate_general_ledger(
        self,
        *,
        entity_id: str,
        month: typing.Optional[str] = None,
        year: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GeneralLedger:
        """
        Generate a general ledger report for an entity

        Parameters
        ----------
        entity_id : str
            entity ID

        month : typing.Optional[str]
            Month (1-12)

        year : typing.Optional[str]
            Year (YYYY)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GeneralLedger
            General ledger report

        Examples
        --------
        import asyncio

        from openledger import AsyncOpenLedgerClient

        client = AsyncOpenLedgerClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.reports.generate_general_ledger(
                entity_id="entityId",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "reports/general-ledger",
            method="GET",
            params={
                "entityId": entity_id,
                "month": month,
                "year": year,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GeneralLedger,
                    parse_obj_as(
                        type_=GeneralLedger,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
