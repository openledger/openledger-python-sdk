# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .types.sandbox_request_preferences import SandboxRequestPreferences
from ..core.request_options import RequestOptions
from ..types.sandbox_response import SandboxResponse
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.pydantic_utilities import parse_obj_as
from ..errors.bad_request_error import BadRequestError
from ..errors.internal_server_error import InternalServerError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class SandboxClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create_sandbox_environment(
        self,
        *,
        name: str,
        developer_id: str,
        industry: typing.Optional[str] = OMIT,
        preferences: typing.Optional[SandboxRequestPreferences] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SandboxResponse:
        """
        Creates a complete sandbox environment for development and testing, including a developer account, workspace, instance, entity, ledger structure, and Plaid sandbox bank connections.

        Parameters
        ----------
        name : str

        developer_id : str

        industry : typing.Optional[str]

        preferences : typing.Optional[SandboxRequestPreferences]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SandboxResponse
            Sandbox environment created successfully

        Examples
        --------
        from openledger import OpenLedgerClient

        client = OpenLedgerClient(
            token="YOUR_TOKEN",
        )
        client.sandbox.create_sandbox_environment(
            name="name",
            developer_id="developer_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "sandbox",
            method="POST",
            json={
                "name": name,
                "developer_id": developer_id,
                "industry": industry,
                "preferences": convert_and_respect_annotation_metadata(
                    object_=preferences, annotation=SandboxRequestPreferences, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SandboxResponse,
                    parse_obj_as(
                        type_=SandboxResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncSandboxClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create_sandbox_environment(
        self,
        *,
        name: str,
        developer_id: str,
        industry: typing.Optional[str] = OMIT,
        preferences: typing.Optional[SandboxRequestPreferences] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SandboxResponse:
        """
        Creates a complete sandbox environment for development and testing, including a developer account, workspace, instance, entity, ledger structure, and Plaid sandbox bank connections.

        Parameters
        ----------
        name : str

        developer_id : str

        industry : typing.Optional[str]

        preferences : typing.Optional[SandboxRequestPreferences]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SandboxResponse
            Sandbox environment created successfully

        Examples
        --------
        import asyncio

        from openledger import AsyncOpenLedgerClient

        client = AsyncOpenLedgerClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.sandbox.create_sandbox_environment(
                name="name",
                developer_id="developer_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "sandbox",
            method="POST",
            json={
                "name": name,
                "developer_id": developer_id,
                "industry": industry,
                "preferences": convert_and_respect_annotation_metadata(
                    object_=preferences, annotation=SandboxRequestPreferences, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SandboxResponse,
                    parse_obj_as(
                        type_=SandboxResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
